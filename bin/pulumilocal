#!/usr/bin/env python

"""
Thin wrapper around the "pulumi" command line interface (CLI) to use
Pulumi (https://pulumi.com) with LocalStack (https://localstack.cloud).

Options:
  Run "pulumi -h" for more details on the pulumi CLI subcommands.
"""

import os
import sys
import argparse
import subprocess
import json
import re

# for local testing
PARENT_FOLDER = os.path.realpath(os.path.join(os.path.dirname(__file__), '..'))
if os.path.isdir(os.path.join(PARENT_FOLDER, '.venv')):
    sys.path.insert(0, PARENT_FOLDER)

# define global constants
TRUE_STRINGS = ['1', 'true', 'True']
PULUMI_CMD = os.environ.get('PULUMI_CMD') or 'pulumi'
LOCALSTACK_HOSTNAME = os.environ.get('LOCALSTACK_HOSTNAME') or 'localhost'
EDGE_PORT = int(os.environ.get('EDGE_PORT') or '4566')
USE_SSL = os.environ.get('USE_SSL') in TRUE_STRINGS

# Do not allow PULUMI_CMD env var to be set to pulumilocal as this causes an error
if PULUMI_CMD == "pulumilocal":
    PULUMI_CMD = "pulumi"


def generate_service_endpoints():
    '''Generate service list from the schema of the currently used AWS package
    '''
    package = None
    pattern = r'^.?pulumi.{1}aws\s*(.*)'
    sp = subprocess.Popen(executable=PULUMI_CMD, args=[PULUMI_CMD, "about"], env=os.environ, stdout=subprocess.PIPE)
    for line in sp.stdout.readlines():
        line = line.decode("utf-8")
        if re.match(pattern,line):
            package = re.match(pattern,line).group(1)
            break
    config_args = [PULUMI_CMD, "package", "get-schema", f"aws@{package}"]
    output = subprocess.check_output(executable=PULUMI_CMD, args=config_args, env=os.environ, stderr=subprocess.PIPE)
    schema = json.loads(output.decode("utf-8"))
    services = list(schema['types']['aws:config/endpoints:endpoints']['properties'].keys())
    return services
    

def get_service_endpoint():
    protocol = 'https' if USE_SSL else 'http'
    endpoint = '%s://%s:%s' % (protocol, LOCALSTACK_HOSTNAME, EDGE_PORT)
    return endpoint


def set_localstack_pulumi_config(args: argparse.Namespace):
    # LocalStack Endpoint
    service_url = get_service_endpoint()
    # Create argument list to pulumi config set-all
    config_args = list()
    config_args.append(PULUMI_CMD)
    config_args.append("config")
    # If stack arg was supplied, add it to config command
    if args.stack:
        config_args.append("--stack")
        config_args.append(args.stack)
    # If cwd arg was supplied, add it to config command
    if args.cwd:
        config_args.append("--cwd")
        config_args.append(args.cwd)
    config_args.append("set-all")
    config_args.append("--plaintext")
    config_args.append("aws:region=us-east-1")
    config_args.append("--plaintext")
    config_args.append("aws:accessKey=test")
    config_args.append("--plaintext")
    config_args.append("aws:secretKey=test")
    config_args.append("--plaintext")
    config_args.append("aws:s3UsePathStyle=true")
    config_args.append("--plaintext")
    config_args.append("aws:skipCredentialsValidation=true")
    config_args.append("--plaintext")
    config_args.append("aws:skipRequestingAccountId=true")
    # Add the AWS Endpoints list
    for idx, service in enumerate(generate_service_endpoints()):
        config_args.append("--path")
        config_args.append("--plaintext")
        config_args.append(f"aws:endpoints[{idx}].{service}={service_url}")
    process = subprocess.Popen(executable=PULUMI_CMD, args=config_args, env=os.environ, stdout=subprocess.PIPE)
    process.wait()


def main():
    # Parse arguments from call to pulumi CLI that set the stack name and directory
    parser = argparse.ArgumentParser(add_help=False)
    parser.add_argument("command", help="pulumi primary command",
                        type=str)
    parser.add_argument("-s", "--stack", help="pulumi stack name",
                        required=False,
                        type=str)
    parser.add_argument("-C", "--cwd", help="run in this directory",
                        required=False,
                        type=str)
    args, extra = parser.parse_known_args()

    # If this is a pulumi deployment command, update the stack with LocalStack AWS config
    if args.command in ["up", "destroy", "preview", "cancel"]:
        print("Updating this Stack with LocalStack config")
        set_localstack_pulumi_config(args)
    # Run the original command
    return os.execvp(PULUMI_CMD, sys.argv)


if __name__ == '__main__':
    main()
